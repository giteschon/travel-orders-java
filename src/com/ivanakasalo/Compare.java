/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ivanakasalo;

import com.ivanakasalo.dal.SqlRepository;
import com.ivanakasalo.model.Driver;
import com.ivanakasalo.model.Vehicle;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author Ivy
 */
public class Compare extends javax.swing.JFrame {

    /**
     * Creates new form Compare
     */
    public Compare() {
        initComponents();
        try {
            fillDrivers(lbDrivers);
             fillVehicles(lbVehicles);
        } catch (IOException ex) {
            Logger.getLogger(Compare.class.getName()).log(Level.SEVERE, null, ex);
           
        }
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lbVehicles = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lbDrivers = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbVehicles.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lbVehicles);

        lbDrivers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lbDrivers);

        jLabel1.setText("Compare results for Drivers");

        jLabel2.setText("Compare results for Vehicles");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compare().setVisible(true);
            }
        });
        
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lbDrivers;
    private javax.swing.JList<String> lbVehicles;
    // End of variables declaration//GEN-END:variables

    
    
    private static void fillDrivers(JList lb) throws IOException {
        DefaultListModel mod= new DefaultListModel();
        try {
            ArrayList<Driver> file= ReaderWriter.readDriver(Main.PATH);
      ArrayList<Driver> database= SqlRepository.getDrivers();
      
        for (int i = 0; i < file.size(); i++) {
          
            
             if (database.get(i).getName().equals(file.get(i).getName()) &&
                     database.get(i).getSurname().equals(file.get(i).getSurname())&&
                     database.get(i).getMobile().equals(file.get(i).getMobile()) &&
                     database.get(i).getLicenceNo().equals(file.get(i).getLicenceNo())) {
                
            mod.addElement("Same");
             
        }
            
             else{
             mod.addElement("DIFFERENT");
             }
              lb.setModel(mod);
        }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
      
       
    }

    private static void fillVehicles(JList lb) {
        DefaultListModel mod= new DefaultListModel();
        try {
            ArrayList<Vehicle> file= ReaderWriter.readVehicles(Main.PATH);
      ArrayList<Vehicle> database= SqlRepository.getVehicles();
       
        for (int i = 0; i < file.size(); i++) {
           
             if (database.get(i).getType().equals(file.get(i).getType())&&
                     database.get(i).getBrand().getName().equals(file.get(i).getBrand().getName())&&
                     database.get(i).getYearOfProduction()== file.get(i).getYearOfProduction()&&
                     database.get(i).getInitialKilometers()== file.get(i).getInitialKilometers() &&
                     database.get(i).isIsAvailable()== file.get(i).isIsAvailable()
                     ) {
           
            mod.addElement("Same");
        }
             else{
             mod.addElement("DIFFERENT");
             }
             
        }
         lb.setModel(mod);
        } catch (IOException e) {
            System.out.println(e.getMessage());
            
        }
    }
}
